name: Deploy

on:
    workflow_dispatch:  # manual trigger przez guzik

jobs:
    deploy:
        name: Deploy to server
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install sshpass
              run: sudo apt-get update && sudo apt-get install -y sshpass

            - name: Rsync files to server (excluding var and .env)
              run: |
                  set -e
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    echo "Połączenie przez klucz SSH działa."
                    rsync -avz --delete --exclude 'var' --exclude '.env' -e "ssh -p ${{ secrets.SSH_PORT }}" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}
                  else
                    echo "Klucz SSH nie działa, próbuję przez hasło."
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" rsync -avz --delete --exclude 'var' --exclude '.env' -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}
                  fi

            - name: Create .env file on server
              run: |
                  ENV_CMD="
                  cd ${{ secrets.SSH_PATH }}
                  echo \"DATABASE_URL=${{ secrets.DATABASE_URL }}\" > .env
                  echo \"APP_ENV=prod\" >> .env
                  echo \"APP_SECRET=${{ secrets.APP_SECRET }}\" >> .env
                  "
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$ENV_CMD"
                  else
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$ENV_CMD"
                  fi

            - name: Create var/cache and var/log on server
              run: |
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.SSH_PATH }}/var/cache ${{ secrets.SSH_PATH }}/var/log"
                  else
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.SSH_PATH }}/var/cache ${{ secrets.SSH_PATH }}/var/log"
                  fi

            - name: Docker Compose up on server
              run: |
                  DOCKER_CMD="cd ${{ secrets.SSH_PATH }} && docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  else
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  fi

            - name: Composer install in php-fpm container
              run: |
                  DOCKER_CMD="cd ${{ secrets.SSH_PATH }} && docker compose exec -T php-fpm composer install --no-interaction --prefer-dist"
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  else
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  fi

            - name: Run migrations
              run: |
                  DOCKER_CMD="cd ${{ secrets.SSH_PATH }} && docker compose exec -T php-fpm ./bin/console doctrine:migrations:migrate -vvv"
                  if ssh -p ${{ secrets.SSH_PORT }} -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo ok' 2>/dev/null; then
                    ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  else
                    sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$DOCKER_CMD"
                  fi
