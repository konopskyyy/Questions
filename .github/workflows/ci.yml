name: CI

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    backend-php-cs-fixer:
        name: PHP CS Fixer & PHPUnit (Symfony)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'
            - name: Install Composer dependencies
              run: composer install --no-interaction --prefer-dist
            - name: Run PHP CS Fixer
              run: |
                  composer global require friendsofphp/php-cs-fixer
                  PHP_CS_FIXER_IGNORE_ENV=1 ~/.composer/vendor/bin/php-cs-fixer fix --dry-run --diff src

    backend-php-psalm:
        name: PHP Psalm (Symfony)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'
            - name: Install Composer dependencies
              run: composer install --no-interaction --prefer-dist
            - name: Run Psalm
              run: ./bin/psalm --output-format=github

    deploy:
        name: Deploy to server
        runs-on: ubuntu-latest
        needs: [backend-php-cs-fixer, backend-php-psalm]
        steps:
            - uses: actions/checkout@v4

            - name: Set up SSH key
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Prepare environment variables
              run: |
                  echo "APP_ENV=prod" > .env.local
                  echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.local
                  echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env.local
                  # Dodaj inne zmienne środowiskowe według potrzeb

            - name: Rsync files to server (excluding var)
              run: |
                  rsync -avz --delete --exclude 'var' -e "ssh -p ${{ secrets.SSH_PORT }}" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}

            - name: Create var/cache and var/log on server
              run: |
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.SSH_PATH }}/var/cache ${{ secrets.SSH_PATH }}/var/log"

            - name: Docker Compose up on server
              run: |
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.SSH_PATH }} && docker compose up -d"

            - name: Composer install in php-fpm container
              run: |
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.SSH_PATH }} && docker compose exec -T php-fpm composer install --no-interaction --prefer-dist"
